{"version":3,"sources":["AdviceComponent.js","App.js","reportWebVitals.js","index.js"],"names":["AdviceComponent","useState","advice","setAdvice","loading","setLoading","fetchState","setFetchState","fetchadvice","a","axios","get","process","response","console","log","data","slip","setTimeout","useEffect","className","onClick","style","background","disabled","src","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAgDeA,EA5CS,WAAO,IAAD,EACAC,mBAAS,IADT,mBACrBC,EADqB,KACbC,EADa,OAEEF,oBAAS,GAFX,mBAErBG,EAFqB,KAEZC,EAFY,OAGQJ,oBAAS,GAHjB,mBAGrBK,EAHqB,KAGTC,EAHS,KAKtBC,EAAW,uCAAG,8BAAAC,EAAA,6DAClBJ,GAAW,GACXE,GAAc,GAFI,SAGGG,IAAMC,IAAN,UAVKC,8BAUL,WAHH,OAGdC,EAHc,OAIlBC,QAAQC,IAAI,CAAEF,aACNX,EAAWW,EAASG,KAAKC,KAAzBf,OACRC,EAAUD,GACVG,GAAW,GACXa,YAAW,kBAAMX,GAAc,KAAO,KARpB,4CAAH,qDAmBjB,OARAY,qBAAU,WACRX,MAKC,IAGD,qBAAKY,UAAU,YAAf,SACGhB,EACC,qCACE,mCAAMF,EAAN,OACCI,EACC,wBAAQe,QAAS,kBAAMb,KAAvB,4BAEA,wBAAQc,MAAO,CAAEC,WAAY,WAAaC,SAAUlB,EAApD,gCAMJ,qBAAKmB,IAAI,cAAcC,IAAI,eCrBpBC,MAlBf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SASE,cAAC,EAAD,SCHOQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cebc6b44.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nconst { REACT_APP_BASEURL } = process.env;\n\nconst AdviceComponent = () => {\n  const [advice, setAdvice] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [fetchState, setFetchState] = useState(false);\n\n  const fetchadvice = async () => {\n    setLoading(false);\n    setFetchState(false);\n    let response = await axios.get(`${REACT_APP_BASEURL}advice`);\n    console.log({ response });\n    const { advice } = response.data.slip;\n    setAdvice(advice);\n    setLoading(true);\n    setTimeout(() => setFetchState(true), 5000);\n  };\n\n  useEffect(() => {\n    fetchadvice();\n    //fetch();\n    //   return () => {\n    //       cleanup\n    //   }\n  }, []);\n\n  return (\n    <div className=\"container\">\n      {loading ? (\n        <>\n          <h2> {advice} </h2>\n          {fetchState ? (\n            <button onClick={() => fetchadvice()}>Give me advice</button>\n          ) : (\n            <button style={{ background: \"#888888\" }} disabled={fetchState}>\n              Please wait....\n            </button>\n          )}\n        </>\n      ) : (\n        <img src=\"loading.gif\" alt=\"loading\" />\n      )}\n    </div>\n  );\n};\n\nexport default AdviceComponent;\n","import \"./App.css\";\nimport AdviceComponent from \"./AdviceComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n        <AdviceComponent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}